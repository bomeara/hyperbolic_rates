---
title: "A Hyperbolic Turn: Redefining Temporal Rate Patterns"
format:
  html:
    embed-resources: true
editor: visual
execute:
  cache: false
---

```{r, echo=FALSE, message=FALSE, warning=FALSE, error=FALSE}
sink(file='/dev/null')
knitr::opts_chunk$set(
  message=FALSE,
  warning=FALSE,
  error=FALSE,
  echo=FALSE,
  cache=TRUE
)

library(targets)
#source("_targets.R")
#tar_make()

#tar_load_everything(strict=FALSE)
tar_load(hyperr8_analysis)
tar_load(hyperr8_datum_summarized_percentiles)
library(ggplot2)
library(tidyr)
library(Rmpfr)
library(dplyr)
library(cowplot)
library(scales)
library(hyperr8)
source("functions.R")
sink(NULL)
```

## cowplot

```{r coloronlycowplot, fig.width=12, fig.height=18, eval=TRUE, error=FALSE, warning=FALSE, message=FALSE}
library(scales)
datasets_and_n <- hyperr8_analysis |> dplyr::distinct(dataset, n) |> dplyr::arrange(desc(n))
datasets <- unique(datasets_and_n$dataset)

repsets <- c("Original", "Rep 1")
focal_dataset <- data.frame()

predict_rate <- function(time, hmb) {
h <- hmb[1]
m <- hmb[2]
b <- hmb[3]
return( ((h/time) + m*time + b))
}
predict_rate_extremes <- function(time, hmb) {
	return(range(predict_rate(time, hmb)))
}

all_ribbon_data <- data.frame()

# rolling slope, from user G. Grothendieck at https://stackoverflow.com/questions/41061140/how-to-calculate-the-average-slope-within-a-moving-window-in-r
log_NA <- function(x) {
	suppressWarnings({
	x_transformed <- log(x)
	x_transformed[!is.finite(x_transformed)] <-0
	})
	return(x_transformed)	
}
Coef <- function(Z) unname(coef(lm(log_NA(predicted_rate) ~ log_NA(time), as.data.frame(Z), na.action="na.fail"))[2])  


all_plots <- list()


for (dataset_name in datasets) {
	range_dataset <- subset(hyperr8_analysis, dataset==dataset_name)
	range_dataset_original <- subset(range_dataset, rep=="Original")
	ylim_setting <- c(NA, 10+log(max(range_dataset_original$empirical_rate, na.rm=TRUE)))
	for(rep_name in repsets) {
	
  local_dataset <- subset(hyperr8_analysis, dataset==dataset_name & rep==rep_name)
  local_dataset$deltaAIC <- local_dataset$AIC - min(local_dataset$AIC)
  local_dataset <- subset(local_dataset, deltaAIC==0)
  local_dataset <- local_dataset[order(local_dataset$time),]
  
  
  ribbon_dataset <- data.frame(time=exp(seq(from=log(min(local_dataset$time)), to=log(max(local_dataset$time)), length.out=1000)))
  h <- unique(local_dataset$param_h)
  m <- unique(local_dataset$param_m)
  b <- unique(local_dataset$param_b)
  all_hmb <- expand.grid(h=c(unique(local_dataset$param_h_lower), unique(local_dataset$param_h_upper)), m=c(unique(local_dataset$param_m_lower), unique(local_dataset$param_m_upper)), b=c(unique(local_dataset$param_b_lower), unique(local_dataset$param_b_upper)))

  
  ribbon_dataset$predicted_rate <- sapply(ribbon_dataset$time, predict_rate, hmb=c(h, m, b))
  all_predictions <- sapply(ribbon_dataset$time, predict_rate_extremes, hmb=all_hmb)
  ribbon_dataset$predicted_rate_lower <- all_predictions[1,]
  ribbon_dataset$predicted_rate_upper <- all_predictions[2,]
  #ggplot(ribbon_dataset, aes(x=time, y=predicted_rate)) + geom_line() + geom_line(aes(y=predicted_rate_upper)) + geom_line(aes(y=predicted_rate_lower))
  
  ribbon_dataset$hyperbolic_component <- sapply(ribbon_dataset$time, predict_rate, hmb=c(h, 0, 0))
  ribbon_dataset$linear_component <- sapply(ribbon_dataset$time, predict_rate, hmb=c(0, m, 0))
  ribbon_dataset$constant_component <- sapply(ribbon_dataset$time, predict_rate, hmb=c(0, 0, b))
  
  
  ribbon_dataset$hyperbolic_component_proportion <- abs(ribbon_dataset$hyperbolic_component)/(abs(ribbon_dataset$hyperbolic_component)+abs(ribbon_dataset$linear_component)+abs(ribbon_dataset$constant_component))
  ribbon_dataset$linear_component_proportion <- abs(ribbon_dataset$linear_component)/(abs(ribbon_dataset$hyperbolic_component)+abs(ribbon_dataset$linear_component)+abs(ribbon_dataset$constant_component))
  ribbon_dataset$constant_component_proportion <- abs(ribbon_dataset$constant_component)/(abs(ribbon_dataset$hyperbolic_component)+abs(ribbon_dataset$linear_component)+abs(ribbon_dataset$constant_component))
  
  ribbon_dataset$hyperbolic_component_lower <- unique(local_dataset$param_h_lower)/ribbon_dataset$time
  ribbon_dataset$hyperbolic_component_upper <- unique(local_dataset$param_h_upper)/ribbon_dataset$time
  ribbon_dataset$linear_component_lower <- unique(local_dataset$param_m_lower)*ribbon_dataset$time
  ribbon_dataset$linear_component_upper <- unique(local_dataset$param_m_upper)*ribbon_dataset$time
  ribbon_dataset$constant_component_lower <- unique(local_dataset$param_b_lower)
  ribbon_dataset$constant_component_upper <- unique(local_dataset$param_b_upper)
  
  ribbon_dataset$hyperbolic_component_proportion_lower <- NA 
  ribbon_dataset$hyperbolic_component_proportion_upper <- NA
  ribbon_dataset$linear_component_proportion_lower <- NA
  ribbon_dataset$linear_component_proportion_upper <- NA
  ribbon_dataset$constant_component_proportion_lower <- NA
  ribbon_dataset$constant_component_proportion_upper <- NA
  
  #if(rep_name=="Original") {
	for (row_index in sequence(nrow(ribbon_dataset))) {
		params <- expand.grid(h=c(ribbon_dataset$hyperbolic_component_lower[row_index], ribbon_dataset$hyperbolic_component_upper[row_index]), m=c(ribbon_dataset$linear_component_lower[row_index], ribbon_dataset$linear_component_upper[row_index]), b=c(ribbon_dataset$constant_component_lower[row_index], ribbon_dataset$constant_component_upper[row_index]))
		params$h_rate <- abs(params$h/ribbon_dataset$time[row_index])
		params$m_rate <- abs(params$m*ribbon_dataset$time[row_index])
		params$b_rate <- abs(params$b)
		params$hyperbolic_component_proportion <- abs(params$h_rate)/(abs(params$h_rate)+abs(params$m_rate)+abs(params$b_rate))
		params$linear_component_proportion <- abs(params$m_rate)/(abs(params$h_rate)+abs(params$m_rate)+abs(params$b_rate))
		params$constant_component_proportion <- abs(params$b_rate)/(abs(params$h_rate)+abs(params$m_rate)+abs(params$b_rate))
		ribbon_dataset$hyperbolic_component_proportion_lower[row_index] <- min(params$hyperbolic_component_proportion)
		ribbon_dataset$hyperbolic_component_proportion_upper[row_index] <- max(params$hyperbolic_component_proportion)
		ribbon_dataset$linear_component_proportion_lower[row_index] <- min(params$linear_component_proportion)
		ribbon_dataset$linear_component_proportion_upper[row_index] <- max(params$linear_component_proportion)
		ribbon_dataset$constant_component_proportion_lower[row_index] <- min(params$constant_component_proportion)
		ribbon_dataset$constant_component_proportion_upper[row_index] <- max(params$constant_component_proportion)
	}
 # }
  
  ribbon_dataset$dataset <- dataset_name
  ribbon_dataset$rep <- rep_name
 
  ribbon_dataset$slope <- 1 
  slope_window <- 15
  for (row_index in sequence(nrow(ribbon_dataset))) {
	ribbon_dataset$slope[row_index] <- try({abs(Coef(ribbon_dataset[max(1,(row_index-slope_window)):min(nrow(ribbon_dataset), (row_index+slope_window)),]))},silent=TRUE)
  }
  
  ribbon_dataset$scaling_factor_original <- 0.2*abs(diff(range(log(ribbon_dataset$predicted_rate), na.rm=TRUE)))
  if(grepl("Pure", dataset_name)) {
	ribbon_dataset$scaling_factor_original <- max(c(0.5,0.4*abs(diff(range(log(ribbon_dataset$predicted_rate), na.rm=TRUE)))))
  }
  ribbon_dataset$scaling_factor_slope <- ribbon_dataset$scaling_factor_original + 0.3*ifelse(is.finite(ribbon_dataset$slope), ribbon_dataset$slope, 1)
  ribbon_dataset$scaling_factor <- apply(ribbon_dataset[,c("scaling_factor_original", "scaling_factor_slope")], 1, max)
  
  
  local_dataset <- local_dataset |> tidyr::pivot_longer(cols=c("predicted_rate", "empirical_rate", "predicted_rate_no_mserr"), names_to="rate_type", values_to="rate")
	local_dataset <- subset(local_dataset, rate_type=="empirical_rate")
	
	if(rep_name=="Original") {
		all_ribbon_data <- rbind(all_ribbon_data, ribbon_dataset)
	}

	x <- ribbon_dataset

	starting_values <- log(x$predicted_rate)-0.5*x$scaling_factor
x$constant_component_proportion_ribbon_lower <- starting_values
	x$constant_component_proportion_ribbon_upper <- x$constant_component_proportion_ribbon_lower+x$scaling_factor*(x$constant_component_proportion)
	x$linear_component_proportion_ribbon_lower <- x$constant_component_proportion_ribbon_upper
	x$linear_component_proportion_ribbon_upper <- x$linear_component_proportion_ribbon_lower + x$scaling_factor*(x$linear_component_proportion)
	x$hyperbolic_component_proportion_ribbon_lower <- x$linear_component_proportion_ribbon_upper 
	x$hyperbolic_component_proportion_ribbon_upper <- x$hyperbolic_component_proportion_ribbon_lower + x$scaling_factor*(x$hyperbolic_component_proportion)
	x$rate <- x$predicted_rate


	fill_colors <- RColorBrewer::brewer.pal(8, "Dark2")
	# now do geom_ribbon
	
	gcool <- ggplot(local_dataset, aes(x=time, y=log(rate))) + geom_point(aes(x=time, y=log(rate)), colour="gray42", alpha=max(0.05, min(1, 10/sqrt(nrow(local_dataset)) )), size=0.8) + 
		geom_ribbon(data=x, aes(ymin=constant_component_proportion_ribbon_lower, ymax=constant_component_proportion_ribbon_upper), fill=fill_colors[6], alpha=0.7) + 
		geom_ribbon(data=x, aes(ymin=linear_component_proportion_ribbon_lower, ymax=linear_component_proportion_ribbon_upper), fill='cadetblue2', alpha=0.7) + 
		geom_ribbon(data=x, aes(ymin=hyperbolic_component_proportion_ribbon_lower, ymax=hyperbolic_component_proportion_ribbon_upper), fill=fill_colors[4], alpha=0.7) 
		
		gcool <- gcool + scale_x_continuous(trans="log", labels=label_comma())
		gcool <- gcool + scale_y_continuous(labels=function(y) round(exp(y),2), expand=c(0.1, 0.1), limits=ylim_setting)
		print(ylim_setting)
		gcool <- gcool + theme_bw() + xlab("Time (MY)") + ylab("Rate") + ggtitle(gsub("Rep 1", "Randomized", paste0(dataset_name, ": ", unique(local_dataset$rep)))) +
		geom_line(data=x, aes(x=time, y=log(predicted_rate)), color="black") +
		geom_line(data=x, aes(x=time, y=log(predicted_rate_lower)), color="black", lty="dashed") +
	geom_line(data=x, aes(x=time, y=log(predicted_rate_upper)), color="black", lty="dashed") + theme(panel.border = element_blank())
		all_plots[[length(all_plots)+1]] <- gcool
		
		
		if(rep_name!="Original") {
			padding <- 0.002
			local_dataset <- subset(all_ribbon_data, dataset==dataset_name)
			narrow_hyperbolic <- which(local_dataset$hyperbolic_component_proportion_upper-local_dataset$hyperbolic_component_proportion_lower < padding)
			narrow_linear <- which(local_dataset$linear_component_proportion_upper-local_dataset$linear_component_proportion_lower < padding)
			narrow_constant <- which(local_dataset$constant_component_proportion_upper-local_dataset$constant_component_proportion_lower < padding)
			local_dataset$hyperbolic_component_proportion_upper[narrow_hyperbolic] <- local_dataset$hyperbolic_component_proportion_upper[narrow_hyperbolic] + padding/2
			local_dataset$hyperbolic_component_proportion_lower[narrow_hyperbolic] <- local_dataset$hyperbolic_component_proportion_lower[narrow_hyperbolic] - padding/2
			local_dataset$linear_component_proportion_upper[narrow_linear] <- local_dataset$linear_component_proportion_upper[narrow_linear] + padding/2
			local_dataset$linear_component_proportion_lower[narrow_linear] <- local_dataset$linear_component_proportion_lower[narrow_linear] - padding/2
			local_dataset$constant_component_proportion_upper[narrow_constant] <- local_dataset$constant_component_proportion_upper[narrow_constant] + padding/2
			local_dataset$constant_component_proportion_lower[narrow_constant] <- local_dataset$constant_component_proportion_lower[narrow_constant] - padding/2
			
			
			gbands <- ggplot(local_dataset, aes(x=time, y=hyperbolic_component_proportion_upper)) + theme_bw() + xlab("Time") + ylab("Proportion") +
			geom_ribbon(aes(ymin=hyperbolic_component_proportion_lower, ymax=hyperbolic_component_proportion_upper), fill=fill_colors[4], alpha=0.8) +
			geom_ribbon(aes(ymin=linear_component_proportion_lower, ymax=linear_component_proportion_upper), fill='cadetblue2', alpha=0.8) +
			geom_ribbon(aes(ymin=constant_component_proportion_lower, ymax=constant_component_proportion_upper), fill=fill_colors[6], alpha=0.8) +
			scale_x_continuous(trans="log", labels=label_comma())
			gbands <- gbands + ggtitle(paste0(dataset_name, ": Confidence")) + theme(panel.border = element_blank())
			all_plots[[length(all_plots)+1]] <- gbands	
		}
	}
		
		
		
	
}
	
#g <- cowplot::plot_grid(plotlist=all_plots, nrow=4, labels = "AUTO", byrow=FALSE, rel_widths=rep(1, 2), rel_heights=rep(1, 2))
g <- cowplot::plot_grid(plotlist=all_plots, ncol=3, labels = "AUTO", byrow=TRUE)
print(g)
all_ribbon_data$dataset <- factor(all_ribbon_data$dataset, levels=datasets)



```



## cowplot funny

```{r, fig.width=12, fig.height=10, eval=TRUE, error=FALSE, warning=FALSE, message=FALSE}
library(scales)
tar_load(hyperr8_analysis_yule_funny_and_regular)
hyperr8_analysis_yule_funny_and_regular$dataset <- gsub(" simulation", "", hyperr8_analysis_yule_funny_and_regular$dataset)
datasets_and_n <- hyperr8_analysis_yule_funny_and_regular |> dplyr::distinct(dataset, n) |> dplyr::arrange(desc(n))
datasets <- unique(datasets_and_n$dataset)

repsets <- c("Original", "Rep 1")
focal_dataset <- data.frame()

predict_rate <- function(time, hmb) {
h <- hmb[1]
m <- hmb[2]
b <- hmb[3]
return( ((h/time) + m*time + b))
}
predict_rate_extremes <- function(time, hmb) {
	return(range(predict_rate(time, hmb)))
}

all_ribbon_data <- data.frame()

# rolling slope, from user G. Grothendieck at https://stackoverflow.com/questions/41061140/how-to-calculate-the-average-slope-within-a-moving-window-in-r
log_NA <- function(x) {
	suppressWarnings({
	x_transformed <- log(x)
	x_transformed[!is.finite(x_transformed)] <-0
	})
	return(x_transformed)	
}
Coef <- function(Z) unname(coef(lm(log_NA(predicted_rate) ~ log_NA(time), as.data.frame(Z), na.action="na.fail"))[2])  


all_plots <- list()


for (dataset_name in datasets) {
	range_dataset <- subset(hyperr8_analysis_yule_funny_and_regular, dataset==dataset_name)
	range_dataset_original <- subset(range_dataset, rep=="Original")
	ylim_setting <- c(NA, 10+log(max(range_dataset_original$empirical_rate, na.rm=TRUE)))
	for(rep_name in repsets) {
	
  local_dataset <- subset(hyperr8_analysis_yule_funny_and_regular, dataset==dataset_name & rep==rep_name)
  local_dataset$deltaAIC <- local_dataset$AIC - min(local_dataset$AIC)
  local_dataset <- subset(local_dataset, deltaAIC==0)
  local_dataset <- local_dataset[order(local_dataset$time),]
  
  
  ribbon_dataset <- data.frame(time=exp(seq(from=log(min(local_dataset$time)), to=log(max(local_dataset$time)), length.out=1000)))
  h <- unique(local_dataset$param_h)
  m <- unique(local_dataset$param_m)
  b <- unique(local_dataset$param_b)
  all_hmb <- expand.grid(h=c(unique(local_dataset$param_h_lower), unique(local_dataset$param_h_upper)), m=c(unique(local_dataset$param_m_lower), unique(local_dataset$param_m_upper)), b=c(unique(local_dataset$param_b_lower), unique(local_dataset$param_b_upper)))

  
  ribbon_dataset$predicted_rate <- sapply(ribbon_dataset$time, predict_rate, hmb=c(h, m, b))
  all_predictions <- sapply(ribbon_dataset$time, predict_rate_extremes, hmb=all_hmb)
  ribbon_dataset$predicted_rate_lower <- all_predictions[1,]
  ribbon_dataset$predicted_rate_upper <- all_predictions[2,]
  #ggplot(ribbon_dataset, aes(x=time, y=predicted_rate)) + geom_line() + geom_line(aes(y=predicted_rate_upper)) + geom_line(aes(y=predicted_rate_lower))
  
  ribbon_dataset$hyperbolic_component <- sapply(ribbon_dataset$time, predict_rate, hmb=c(h, 0, 0))
  ribbon_dataset$linear_component <- sapply(ribbon_dataset$time, predict_rate, hmb=c(0, m, 0))
  ribbon_dataset$constant_component <- sapply(ribbon_dataset$time, predict_rate, hmb=c(0, 0, b))
  
  
  ribbon_dataset$hyperbolic_component_proportion <- abs(ribbon_dataset$hyperbolic_component)/(abs(ribbon_dataset$hyperbolic_component)+abs(ribbon_dataset$linear_component)+abs(ribbon_dataset$constant_component))
  ribbon_dataset$linear_component_proportion <- abs(ribbon_dataset$linear_component)/(abs(ribbon_dataset$hyperbolic_component)+abs(ribbon_dataset$linear_component)+abs(ribbon_dataset$constant_component))
  ribbon_dataset$constant_component_proportion <- abs(ribbon_dataset$constant_component)/(abs(ribbon_dataset$hyperbolic_component)+abs(ribbon_dataset$linear_component)+abs(ribbon_dataset$constant_component))
  
  ribbon_dataset$hyperbolic_component_lower <- unique(local_dataset$param_h_lower)/ribbon_dataset$time
  ribbon_dataset$hyperbolic_component_upper <- unique(local_dataset$param_h_upper)/ribbon_dataset$time
  ribbon_dataset$linear_component_lower <- unique(local_dataset$param_m_lower)*ribbon_dataset$time
  ribbon_dataset$linear_component_upper <- unique(local_dataset$param_m_upper)*ribbon_dataset$time
  ribbon_dataset$constant_component_lower <- unique(local_dataset$param_b_lower)
  ribbon_dataset$constant_component_upper <- unique(local_dataset$param_b_upper)
  
  ribbon_dataset$hyperbolic_component_proportion_lower <- NA 
  ribbon_dataset$hyperbolic_component_proportion_upper <- NA
  ribbon_dataset$linear_component_proportion_lower <- NA
  ribbon_dataset$linear_component_proportion_upper <- NA
  ribbon_dataset$constant_component_proportion_lower <- NA
  ribbon_dataset$constant_component_proportion_upper <- NA
  
  #if(rep_name=="Original") {
	for (row_index in sequence(nrow(ribbon_dataset))) {
		params <- expand.grid(h=c(ribbon_dataset$hyperbolic_component_lower[row_index], ribbon_dataset$hyperbolic_component_upper[row_index]), m=c(ribbon_dataset$linear_component_lower[row_index], ribbon_dataset$linear_component_upper[row_index]), b=c(ribbon_dataset$constant_component_lower[row_index], ribbon_dataset$constant_component_upper[row_index]))
		params$h_rate <- abs(params$h/ribbon_dataset$time[row_index])
		params$m_rate <- abs(params$m*ribbon_dataset$time[row_index])
		params$b_rate <- abs(params$b)
		params$hyperbolic_component_proportion <- abs(params$h_rate)/(abs(params$h_rate)+abs(params$m_rate)+abs(params$b_rate))
		params$linear_component_proportion <- abs(params$m_rate)/(abs(params$h_rate)+abs(params$m_rate)+abs(params$b_rate))
		params$constant_component_proportion <- abs(params$b_rate)/(abs(params$h_rate)+abs(params$m_rate)+abs(params$b_rate))
		ribbon_dataset$hyperbolic_component_proportion_lower[row_index] <- min(params$hyperbolic_component_proportion)
		ribbon_dataset$hyperbolic_component_proportion_upper[row_index] <- max(params$hyperbolic_component_proportion)
		ribbon_dataset$linear_component_proportion_lower[row_index] <- min(params$linear_component_proportion)
		ribbon_dataset$linear_component_proportion_upper[row_index] <- max(params$linear_component_proportion)
		ribbon_dataset$constant_component_proportion_lower[row_index] <- min(params$constant_component_proportion)
		ribbon_dataset$constant_component_proportion_upper[row_index] <- max(params$constant_component_proportion)
	}
 # }
  
  ribbon_dataset$dataset <- dataset_name
  ribbon_dataset$rep <- rep_name
 
  ribbon_dataset$slope <- 1 
  slope_window <- 15
  for (row_index in sequence(nrow(ribbon_dataset))) {
	ribbon_dataset$slope[row_index] <- try({abs(Coef(ribbon_dataset[max(1,(row_index-slope_window)):min(nrow(ribbon_dataset), (row_index+slope_window)),]))},silent=TRUE)
  }
  
  ribbon_dataset$scaling_factor_original <- 0.2*abs(diff(range(log(ribbon_dataset$predicted_rate), na.rm=TRUE)))
  if(grepl("Pure", dataset_name)) {
	ribbon_dataset$scaling_factor_original <- max(c(0.5,0.4*abs(diff(range(log(ribbon_dataset$predicted_rate), na.rm=TRUE)))))
  }
  ribbon_dataset$scaling_factor_slope <- ribbon_dataset$scaling_factor_original + 0.3*ifelse(is.finite(ribbon_dataset$slope), ribbon_dataset$slope, 1)
  ribbon_dataset$scaling_factor <- apply(ribbon_dataset[,c("scaling_factor_original", "scaling_factor_slope")], 1, max)
  
  
  local_dataset <- local_dataset |> tidyr::pivot_longer(cols=c("predicted_rate", "empirical_rate", "predicted_rate_no_mserr"), names_to="rate_type", values_to="rate")
	local_dataset <- subset(local_dataset, rate_type=="empirical_rate")
	
	if(rep_name=="Original") {
		all_ribbon_data <- rbind(all_ribbon_data, ribbon_dataset)
	}

	x <- ribbon_dataset

	starting_values <- log(x$predicted_rate)-0.5*x$scaling_factor
x$constant_component_proportion_ribbon_lower <- starting_values
	x$constant_component_proportion_ribbon_upper <- x$constant_component_proportion_ribbon_lower+x$scaling_factor*(x$constant_component_proportion)
	x$linear_component_proportion_ribbon_lower <- x$constant_component_proportion_ribbon_upper
	x$linear_component_proportion_ribbon_upper <- x$linear_component_proportion_ribbon_lower + x$scaling_factor*(x$linear_component_proportion)
	x$hyperbolic_component_proportion_ribbon_lower <- x$linear_component_proportion_ribbon_upper 
	x$hyperbolic_component_proportion_ribbon_upper <- x$hyperbolic_component_proportion_ribbon_lower + x$scaling_factor*(x$hyperbolic_component_proportion)
	x$rate <- x$predicted_rate


	fill_colors <- RColorBrewer::brewer.pal(8, "Dark2")
	# now do geom_ribbon
	
	gcool <- ggplot(local_dataset, aes(x=time, y=log(rate))) + geom_point(aes(x=time, y=log(rate)), colour="gray42", alpha=max(0.05, min(1, 10/sqrt(nrow(local_dataset)) )), size=0.8) + 
		geom_ribbon(data=x, aes(ymin=constant_component_proportion_ribbon_lower, ymax=constant_component_proportion_ribbon_upper), fill=fill_colors[6], alpha=0.7) + 
		geom_ribbon(data=x, aes(ymin=linear_component_proportion_ribbon_lower, ymax=linear_component_proportion_ribbon_upper), fill='cadetblue2', alpha=0.7) + 
		geom_ribbon(data=x, aes(ymin=hyperbolic_component_proportion_ribbon_lower, ymax=hyperbolic_component_proportion_ribbon_upper), fill=fill_colors[4], alpha=0.7) 
		
		gcool <- gcool + scale_x_continuous(trans="log", labels=label_comma())
		gcool <- gcool + scale_y_continuous(labels=function(y) round(exp(y),2), expand=c(0.1, 0.1), limits=ylim_setting)
		print(ylim_setting)
		gcool <- gcool + theme_bw() + xlab("Time (MY)") + ylab("Rate") + ggtitle(gsub("Rep 1", "Randomized", paste0(dataset_name, ": ", unique(local_dataset$rep)))) +
		geom_line(data=x, aes(x=time, y=log(predicted_rate)), color="black") +
		geom_line(data=x, aes(x=time, y=log(predicted_rate_lower)), color="black", lty="dashed") +
	geom_line(data=x, aes(x=time, y=log(predicted_rate_upper)), color="black", lty="dashed") + theme(panel.border = element_blank())
		all_plots[[length(all_plots)+1]] <- gcool
		
		
		if(rep_name!="Original") {
			padding <- 0.002
			local_dataset <- subset(all_ribbon_data, dataset==dataset_name)
			narrow_hyperbolic <- which(local_dataset$hyperbolic_component_proportion_upper-local_dataset$hyperbolic_component_proportion_lower < padding)
			narrow_linear <- which(local_dataset$linear_component_proportion_upper-local_dataset$linear_component_proportion_lower < padding)
			narrow_constant <- which(local_dataset$constant_component_proportion_upper-local_dataset$constant_component_proportion_lower < padding)
			local_dataset$hyperbolic_component_proportion_upper[narrow_hyperbolic] <- local_dataset$hyperbolic_component_proportion_upper[narrow_hyperbolic] + padding/2
			local_dataset$hyperbolic_component_proportion_lower[narrow_hyperbolic] <- local_dataset$hyperbolic_component_proportion_lower[narrow_hyperbolic] - padding/2
			local_dataset$linear_component_proportion_upper[narrow_linear] <- local_dataset$linear_component_proportion_upper[narrow_linear] + padding/2
			local_dataset$linear_component_proportion_lower[narrow_linear] <- local_dataset$linear_component_proportion_lower[narrow_linear] - padding/2
			local_dataset$constant_component_proportion_upper[narrow_constant] <- local_dataset$constant_component_proportion_upper[narrow_constant] + padding/2
			local_dataset$constant_component_proportion_lower[narrow_constant] <- local_dataset$constant_component_proportion_lower[narrow_constant] - padding/2
			
			
			gbands <- ggplot(local_dataset, aes(x=time, y=hyperbolic_component_proportion_upper)) + theme_bw() + xlab("Time") + ylab("Proportion") +
			geom_ribbon(aes(ymin=hyperbolic_component_proportion_lower, ymax=hyperbolic_component_proportion_upper), fill=fill_colors[4], alpha=0.8) +
			geom_ribbon(aes(ymin=linear_component_proportion_lower, ymax=linear_component_proportion_upper), fill='cadetblue2', alpha=0.8) +
			geom_ribbon(aes(ymin=constant_component_proportion_lower, ymax=constant_component_proportion_upper), fill=fill_colors[6], alpha=0.8) +
			scale_x_continuous(trans="log", labels=label_comma())
			gbands <- gbands + ggtitle(paste0(dataset_name, ": Confidence")) + theme(panel.border = element_blank())
			all_plots[[length(all_plots)+1]] <- gbands	
		}
	}
		
		
		
	
}
	
#g <- cowplot::plot_grid(plotlist=all_plots, nrow=4, labels = "AUTO", byrow=FALSE, rel_widths=rep(1, 2), rel_heights=rep(1, 2))
g <- cowplot::plot_grid(plotlist=all_plots, ncol=3, labels = "AUTO", byrow=TRUE)
print(g)
all_ribbon_data$dataset <- factor(all_ribbon_data$dataset, levels=datasets)



```
